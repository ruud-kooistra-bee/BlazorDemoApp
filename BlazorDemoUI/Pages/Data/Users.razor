@page "/Data/Users"

@using DataAccessLibrary
@using DataAccessLibrary.Models
@using BlazorDemoUI.Models
@using System.Security.Cryptography

@inject IUsersData _db

<h3>User Page</h3>

<h4>Insert new User</h4>
<EditForm Model="@newUser" OnValidSubmit="InsertUser">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="form-group">
        <label for="email" class="required">Email</label>
        <InputText id="email" @bind-Value="newUser.Email" class="form-control"></InputText>
        <ValidationMessage For="@(() => newUser.Email)"></ValidationMessage>
    </div>
    <div class="form-group">
        <label for="username" class="required">Username</label>
        <InputText id="username" @bind-Value="newUser.Username" class="form-control"></InputText>
        <ValidationMessage For="@(() => newUser.Username)"></ValidationMessage>
    </div>
    <div class="form-group">
        <label for="password" class="required">Password</label>
        <InputText id="password" @bind-Value="newUser.Password" class="form-control" type="password"></InputText>
        <ValidationMessage For="@(() => newUser.Password)"></ValidationMessage>
    </div>
    <div class="form-group">
        <label for="confirmpassword" class="required">Confirm Password</label>
        <InputText id="confirmpassword" @bind-Value="newUser.ConfirmPassword" class="form-control" type="password"></InputText>
        <ValidationMessage For="@(() => newUser.ConfirmPassword)"></ValidationMessage>
    </div>
    <div class="form-group">
        <label for="userrole">Role</label><br />
        <InputSelect id="userrole" @bind-Value="newUser.RoleId" class="form-select">
            @foreach (var role in roles)
            {
                <option value="@role.Id">@role.Name</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="dateofbirth" class="required">Date of birth</label>
        <InputDate id="dateofbirth" @bind-Value="newUser.DateOfBirth" class="form-control"></InputDate>
        <ValidationMessage For="@(() => newUser.DateOfBirth)"></ValidationMessage>
    </div>
    <div class="form-check">
        <InputCheckbox id="confirmed" @bind-Value="newUser.IsConfirmed" class="form-check-input"></InputCheckbox>
        <label for="confirmed" class="form-check-label">Confirmed</label>
        <ValidationMessage For="@(() => newUser.IsConfirmed)"></ValidationMessage>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

<h4>Current User</h4>
@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Email</th>
                <th>Username</th>
                <th>Role</th>
                <th>DateOfBirth</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var user in users)
            {
                <tr>
                    <td>@user.Email</td>
                    <td>@user.Username</td>
                    @foreach(var role in roles)
                    {
                        if(role.Id == user.RoleId)
                        {
                            <td>@role.Name</td>
                            break;
                        }     
                    }
                    <td>@user.DateOfBirth.ToString("dd/MM/yyyy")</td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private List<UserModel> users;
    private List<RoleModel> roles = new List<RoleModel>();
    private DisplayUserModel newUser = new DisplayUserModel();

    protected override async Task OnInitializedAsync()
    {
        users = await _db.GetUsers();
        roles = await _db.GetRoles();
    }

    private async Task InsertUser()
    {   
        CreatePasswordHash(newUser.Password, out byte[] passwordHash, out byte[] passwordSalt);

        UserModel um = new UserModel
        {
            Email = newUser.Email,
            Username = newUser.Username,
            PasswordHash = passwordHash,
            PasswordSalt = passwordSalt,
            RoleId = newUser.RoleId,
            DateOfBirth = newUser.DateOfBirth
        };

        await _db.InsertUser(um);
        users = await _db.GetUsers();
        newUser = new DisplayUserModel();
    }

    private void CreatePasswordHash(string password, out byte[] passwordHash, out byte[] passwordSalt)
    {
        using (var hmac = new HMACSHA512())
        {
            passwordSalt = hmac.Key;
            passwordHash = hmac.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password));
        }
    }
}
